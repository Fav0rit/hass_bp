blueprint:
  name: Bathroom Ventilation Humidity Control
  description: Автоматизация вентиляции в ванной. Вентиляция включается при выключении света в зависимости от времени работы света и/или уровня влажности, и выключается по максимальному времени или сравнению с эталонным датчиком влажности.
  domain: automation
  input:
    light_entities:
      name: Группы света
      description: Выберите группы света в ванной (light).
      selector:
        entity:
          multiple: true
          domain: light
    fan_entities:
      name: Вентиляторы
      description: Выберите вентиляторы (switch или fan) для управления.
      selector:
        entity:
          multiple: true
          domain: [switch, fan]
    bathroom_humidity_sensor:
      name: Датчик влажности в ванной
      description: Выберите датчик влажности (sensor) в ванной.
      selector:
        entity:
          domain: sensor
          device_class: humidity
    reference_humidity_sensor:
      name: Эталонный датчик влажности
      description: Выберите датчик влажности (sensor) в другой части квартиры для сравнения.
      selector:
        entity:
          domain: sensor
          device_class: humidity
    use_time_condition:
      name: Учитывать время работы света
      description: Включить проверку времени работы света для включения.
      default: true
      selector:
        boolean:
    time_threshold:
      name: Минимальное время работы света (в минутах)
      description: Время в минутах, после которого условие включения считается выполненным.
      default: 10
      selector:
        number:
          min: 1
          max: 120
          unit_of_measurement: minutes
    use_humidity_condition:
      name: Учитывать влажность для включения
      description: Включить проверку уровня влажности в ванной для включения.
      default: false
      selector:
        boolean:
    humidity_threshold_on:
      name: Пороговое значение влажности для включения (%)
      description: Уровень влажности в ванной в процентах, выше которого включается вентиляция.
      default: 70
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    logic_type:
      name: Логика условий включения
      description: Выберите, как комбинировать условия включения ('and' — оба должны быть истинны, 'or' — хотя бы одно).
      default: or
      selector:
        select:
          options:
            - and
            - or
    max_run_time:
      name: Максимальное время работы (в минутах)
      description: Максимальное время работы вентиляции (в минутах), после которого она выключается.
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: minutes

trigger:
  - platform: state
    entity_id: !input light_entities
    to: "off"
  - platform: state
    entity_id: !input fan_entities
    to: "on"
    for:
      minutes: !input max_run_time
  - platform: state
    entity_id: !input reference_humidity_sensor

variables:
  light_entities: !input light_entities
  fan_entities: !input fan_entities
  bathroom_humidity_sensor: !input bathroom_humidity_sensor
  reference_humidity_sensor: !input reference_humidity_sensor
  use_time_condition: !input use_time_condition
  time_threshold: !input time_threshold
  use_humidity_condition: !input use_humidity_condition
  humidity_threshold_on: !input humidity_threshold_on
  logic_type: !input logic_type
  max_run_time: !input max_run_time
  last_on_time: >-
    {% set last_on = states[trigger.entity_id].last_changed %}
    {% set now = now() %}
    {{ (now - last_on).total_seconds() / 60 if last_on is not none else 0 }}

condition:
  - condition: template
    value_template: >
      {% if trigger.entity_id in light_entities %}
        {% set time_condition = (not use_time_condition or last_on_time > time_threshold) %}
        {% set humidity_condition = (not use_humidity_condition or (states(bathroom_humidity_sensor) | float(0) > humidity_threshold_on)) %}
        {% if logic_type == 'and' %}
          {{ time_condition and humidity_condition }}
        {% else %}
          {{ time_condition or humidity_condition }}
        {% endif %}
      {% elif trigger.entity_id in fan_entities %}
        {{ true }}
      {% elif trigger.entity_id == reference_humidity_sensor %}
        {{ states(bathroom_humidity_sensor) | float(0) <= states(reference_humidity_sensor) | float(0) and states(fan_entities[0]) == 'on' }}
      {% else %}
        {{ false }}
      {% endif %}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id in light_entities }}"
        sequence:
          - service: "{{ fan_entities[0].split('.')[0] }}.turn_on"
            target:
              entity_id: !input fan_entities
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id in fan_entities or (trigger.entity_id == reference_humidity_sensor and states(bathroom_humidity_sensor) | float(0) <= states(reference_humidity_sensor) | float(0)) }}"
        sequence:
          - service: "{{ fan_entities[0].split('.')[0] }}.turn_off"
            target:
              entity_id: !input fan_entities
